// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-axios";
import type {
  GetSelfApiV1UserMeGetData,
  GetSelfApiV1UserMeGetResponse,
  RegisterUserApiV1UserAuthRegisterPostData,
  RegisterUserApiV1UserAuthRegisterPostResponse,
  RegisterUserApiV1UserAuthRegisterPostError,
  LoginForAccessTokenApiV1UserAuthLoginPostData,
  LoginForAccessTokenApiV1UserAuthLoginPostResponse,
  LoginForAccessTokenApiV1UserAuthLoginPostError,
  CreateDriverApiV1UserAddDriverPostData,
  CreateDriverApiV1UserAddDriverPostResponse,
  CreateDriverApiV1UserAddDriverPostError,
  DriversAllApiV1UserAllPostData,
  DriversAllApiV1UserAllPostResponse,
  CreateTripApiV1TripAddTripPostData,
  CreateTripApiV1TripAddTripPostResponse,
  CreateTripApiV1TripAddTripPostError,
  UserTripsApiV1TripAllPostData,
  UserTripsApiV1TripAllPostResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Self
 */
export const getSelfApiV1UserMeGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetSelfApiV1UserMeGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSelfApiV1UserMeGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user/me",
    ...options,
  });
};

/**
 * Register User
 */
export const registerUserApiV1UserAuthRegisterPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<RegisterUserApiV1UserAuthRegisterPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterUserApiV1UserAuthRegisterPostResponse,
    RegisterUserApiV1UserAuthRegisterPostError,
    ThrowOnError
  >({
    url: "/api/v1/user/auth/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenApiV1UserAuthLoginPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<LoginForAccessTokenApiV1UserAuthLoginPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginForAccessTokenApiV1UserAuthLoginPostResponse,
    LoginForAccessTokenApiV1UserAuthLoginPostError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/api/v1/user/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Create Driver
 * method for add logedin user to drivers
 */
export const createDriverApiV1UserAddDriverPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateDriverApiV1UserAddDriverPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDriverApiV1UserAddDriverPostResponse,
    CreateDriverApiV1UserAddDriverPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user/add-driver/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Drivers All
 */
export const driversAllApiV1UserAllPost = <
  ThrowOnError extends boolean = false
>(
  options?: Options<DriversAllApiV1UserAllPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    DriversAllApiV1UserAllPostResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user/all",
    ...options,
  });
};

/**
 * Create Trip
 */
export const createTripApiV1TripAddTripPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateTripApiV1TripAddTripPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTripApiV1TripAddTripPostResponse,
    CreateTripApiV1TripAddTripPostError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/trip/add-trip",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * User Trips
 */
export const userTripsApiV1TripAllPost = <ThrowOnError extends boolean = false>(
  options?: Options<UserTripsApiV1TripAllPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    UserTripsApiV1TripAllPostResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/trip/all",
    ...options,
  });
};
